version: '3'

services:
  web:
    build: .
    restart: always
    environment:
      BACKGROUND_ENV: "web"
      DOCKER_ENV: "true"
      REDIS_HOST: "redis"
      TWITTER_CONSUMER_KEY: ${TWITTER_CONSUMER_KEY}
      TWITTER_CONSUMER_SECRET: ${TWITTER_CONSUMER_SECRET}
      TWITTER_ACCESS_TOKEN: ${TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${TWITTER_ACCESS_TOKEN_SECRET}
      TWITTER_FETCH_DAYS: ${TWITTER_FETCH_DAYS}
    depends_on:
      - "db"
      - "redis"
    ports:
      - "8000:80"

  worker:
    build: .
    restart: always
    environment:
      BACKGROUND_ENV: "worker"
      DOCKER_ENV: "true"
      REDIS_HOST: "redis"
      TWITTER_CONSUMER_KEY: ${TWITTER_CONSUMER_KEY}
      TWITTER_CONSUMER_SECRET: ${TWITTER_CONSUMER_SECRET}
      TWITTER_ACCESS_TOKEN: ${TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_TOKEN_SECRET: ${TWITTER_ACCESS_TOKEN_SECRET}
      TWITTER_FETCH_DAYS: ${TWITTER_FETCH_DAYS}
    depends_on:
      - "db"
      - "redis"

  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: interest_miner
      POSTGRES_USER: interest_miner
      POSTGRES_DB: interest_miner_db
    volumes:
      - database-data:/var/lib/postgresql/data/

  redis:
    image: redis
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 1s
        max_attempts: 3
        window: 120s

volumes:
  database-data: # named volumes can be managed easier using docker-compose